<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- 서비스, 리포지토리 레이어에서 사용할 빈들을 스캔하는 설정 -->
	<!-- 다음 base-package에 있는 클래스들을 빈으로 생성 -->
    <context:component-scan base-package="com.javalab.mybatis.service"></context:component-scan>
	<context:component-scan base-package="com.javalab.mybatis.mapper"></context:component-scan>	
	
	<!-- 매퍼 인터페이스의 위치를 지정하는 설정 -->
	<mybatis-spring:scan base-package="com.javalab.mybatis.mapper"/>
	
	<!-- property-placeholder
		1. 외부에 설정되어 있는 데이터베이스 계정과
		2. JDBC 드라이버 로딩 문자열
		3. DB 연결 문자열등이 저장된 파일을 읽어온다. -->
	<context:property-placeholder location="classpath:config/database.properties" />
	
	<!-- HikariCP 설정
		 HikariConfig : HikariCP 설정을 위한 클래스로 오라클 DB에 접속하기 위한 정보를
		 설정한다. pom.xml에 설정한 의존성이 설정되어 있음 -->	
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <!-- <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>	
	<!-- HikariCP DataSource 설정
		 HikariDataSource : sql.DataSource 인터페이스의 자식으로 커넥션 풀을 
		 생성하는 클래스이다. pom.xml에 설정한 의존성이 설정되어 있음. -->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg ref="hikariConfig" />
    </bean>
	
	<!-- SqlSessionFactory 설정[공장 : SqlSession 생성하는 공장]
		SqlSessionFactoryBean : dataSource를 주입받으며 Spring이 MyBatis의 SqlSessionFactory를 
        생성하고 관리할 수 있도록 도와줍니다. 이는 Spring의 빈으로 등록되어 MyBatis 매퍼 인터페이스와 
         XML 파일을 연결합니다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 속성으로 DataSource가 필요함. -->
		<property name="dataSource" ref="dataSource"></property>
		
		<!-- 별명파일(Alias) -->
		<property name="configLocation" 
					value="classpath:/config/sqlMapConfig.xml" />
				
		<!-- 매퍼 xml(쿼리문 모아놓은 파일) -->
		<!-- mapperLocations : 쿼리문을 모아놓은 매퍼xml의 위치를 알려주는 역할.	 
		classpath: src/main/resources 폴더를 가리킨다. 
			*Mapper.xml : 무슨무슨~Mapper.xml -->
		<property name="mapperLocations" 
					value="classpath:/com/javalab/mybatis/mapper/*Mapper.xml" />
					
		<!-- 매퍼XML에서 사용할 vo 설정
			원래는 sqlMapConfig.xml에서 별칭을 만들고 그 별칭을 쿼리문에서
			사용한다. 하지만 다음과 같이 typeAliasesPackage 속성을 주게 되면
			그 경로에 있는 vo 클래스들은 자동으로 클래스 이름만으로 쿼리문에서 사용가능. -->					
		<property name="typeAliasesPackage" value="com.javalab.mybatis.vo" />
	</bean>
	
	<!-- SqlSessionTemplate 생성을 위한 설정
         SqlSessionTemplate은 SqlSession 인터페이스를 구현한 클래스. 이는 Spring과 MyBatis의 
         통합을 위해 설계되었으며, SQL 명령어 실행, 데이터베이스 트랜잭션 관리 및 쿼리 결과 객체 매핑 
         같은 기능을 제공한다. SqlSession 객체는 주로 매퍼 인터페이스나 매퍼 XML 파일을 통해 사용.
  		  SqlSessionTemplate은 커넥션을 직접 사용하는 것보다 다양한 이점을 제공한다.
		1) 자동 트랜잭션 처리 2) 자동으로 SqlSession 열고 닫아준다.
		3) 멀티 스레드 환경에서 안전하게 사용할 수 있다. 
		4) 마이바티스 예외를 Spring의 데이터접근 예외로 변환하여 처리할 수 있다.-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	
</beans>
